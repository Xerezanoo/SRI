{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"INICIO Apuntes SRI 24/25 - Juan Garc\u00eda Lanza - ASIR 2","title":"INICIO"},{"location":"#inicio","text":"Apuntes SRI 24/25 - Juan Garc\u00eda Lanza - ASIR 2","title":"INICIO"},{"location":"1.%20GitHub/","text":"1.1 Configuraci\u00f3n inicial Para configurar el email: git config --global user.email email_del_usuario Para configurar el nombre de usuario: git config --global user.name nombre_usuario","title":"1.1 Configuraci\u00f3n inicial"},{"location":"1.%20GitHub/#11-configuracion-inicial","text":"Para configurar el email: git config --global user.email email_del_usuario Para configurar el nombre de usuario: git config --global user.name nombre_usuario","title":"1.1 Configuraci\u00f3n inicial"},{"location":"1.%20GitHub/1.2%20Clonaci%C3%B3n/","text":"1.2 Clonaci\u00f3n Se puede clonar un repositorio de varias maneras: Con su enlace (HTTPS) --> git clone https://github.com/usuario/repositorio.git Por SSH --> git clone git@github.com:usuario/repositorio.git Para hacer esto, ejecutamos el comando ssh-keygen en el directorio ra\u00edz del home del usuario para generar una clave SSH. Cuando se ejecute, nos pedir\u00e1 que le indiquemos el nombre de la clave (esto hay que dejarlo en blanco para que no de fallos, as\u00ed que le damos al intro y se pondr\u00e1 el nombre por defecto que es id_rsa ) y luego una frase de paso (una clave) para que sea m\u00e1s segura. Dentro de GitHub, en la parte de SSH Keys, a\u00f1adimos una nueva con el nombre que queramos y el contenido del archivo de nuestra clave p\u00fablica haciendo cat clave.pub . SI DIERA FALLOS, iniciamos un agente administrador de claves para mantener en cach\u00e9 nuestra clave con eval $(ssh-agent -s) y vinculamos nuestra clave privada con nuestro agente administrador con ssh-add ~/.ssh/clave .","title":"1.2 Clonaci\u00f3n"},{"location":"1.%20GitHub/1.2%20Clonaci%C3%B3n/#12-clonacion","text":"Se puede clonar un repositorio de varias maneras: Con su enlace (HTTPS) --> git clone https://github.com/usuario/repositorio.git Por SSH --> git clone git@github.com:usuario/repositorio.git Para hacer esto, ejecutamos el comando ssh-keygen en el directorio ra\u00edz del home del usuario para generar una clave SSH. Cuando se ejecute, nos pedir\u00e1 que le indiquemos el nombre de la clave (esto hay que dejarlo en blanco para que no de fallos, as\u00ed que le damos al intro y se pondr\u00e1 el nombre por defecto que es id_rsa ) y luego una frase de paso (una clave) para que sea m\u00e1s segura. Dentro de GitHub, en la parte de SSH Keys, a\u00f1adimos una nueva con el nombre que queramos y el contenido del archivo de nuestra clave p\u00fablica haciendo cat clave.pub . SI DIERA FALLOS, iniciamos un agente administrador de claves para mantener en cach\u00e9 nuestra clave con eval $(ssh-agent -s) y vinculamos nuestra clave privada con nuestro agente administrador con ssh-add ~/.ssh/clave .","title":"1.2 Clonaci\u00f3n"},{"location":"1.%20GitHub/1.3%20Flujo%20de%20trabajo/","text":"1.3 Flujo de trabajo El flujo de trabajo es simple: Trabajo con los archivos en mi PC y cuando termino, veo en qu\u00e9 ESTADO est\u00e1n ( git status ). Lo que est\u00e1 en rojo son los cambios que han habido y los que quiero A\u00d1ADIR a GitHub, los meto dentro de git add . Si quiero a\u00f1adir TODO lo que hay, hago git add . . Para CONFIRMAR los cambios, hacemos un git commit y le a\u00f1adiremos un mensaje para que est\u00e9n m\u00e1s ordenados. Se puede poner lo que quieras, pero se suele poner \"Refactor\" o \"Actualizaci\u00f3n\" ( git commit -m Actualizaci\u00f3n ). Para SUBIR los cambios a GitHub, hacemos git push . Cuando vaya a otro ordenador, para VER si han habido cambios hago git fetch . Para TRAERME esos cambios a mi PC, hago git pull . Repito el flujo desde el paso 1.","title":"1.3 Flujo de trabajo"},{"location":"1.%20GitHub/1.3%20Flujo%20de%20trabajo/#13-flujo-de-trabajo","text":"El flujo de trabajo es simple: Trabajo con los archivos en mi PC y cuando termino, veo en qu\u00e9 ESTADO est\u00e1n ( git status ). Lo que est\u00e1 en rojo son los cambios que han habido y los que quiero A\u00d1ADIR a GitHub, los meto dentro de git add . Si quiero a\u00f1adir TODO lo que hay, hago git add . . Para CONFIRMAR los cambios, hacemos un git commit y le a\u00f1adiremos un mensaje para que est\u00e9n m\u00e1s ordenados. Se puede poner lo que quieras, pero se suele poner \"Refactor\" o \"Actualizaci\u00f3n\" ( git commit -m Actualizaci\u00f3n ). Para SUBIR los cambios a GitHub, hacemos git push . Cuando vaya a otro ordenador, para VER si han habido cambios hago git fetch . Para TRAERME esos cambios a mi PC, hago git pull . Repito el flujo desde el paso 1.","title":"1.3 Flujo de trabajo"},{"location":"1.%20GitHub/1.4%20Ramas/","text":"1.4 Ramas git branch --> Te ense\u00f1a las ramas que hay. git branch nombre_rama --> Crea una rama con el nombre que le des. git switch nombre_rama --> Te cambias a la rama que indiques. git merge nombre_rama --> Vuelcas en la rama actual el contenido de la rama que indiques.","title":"1.4 Ramas"},{"location":"1.%20GitHub/1.4%20Ramas/#14-ramas","text":"git branch --> Te ense\u00f1a las ramas que hay. git branch nombre_rama --> Crea una rama con el nombre que le des. git switch nombre_rama --> Te cambias a la rama que indiques. git merge nombre_rama --> Vuelcas en la rama actual el contenido de la rama que indiques.","title":"1.4 Ramas"},{"location":"1.%20GitHub/1.5%20GitHub%20Pages%20y%20Mkdocs/","text":"1.5 GitHub Pages y Mkdocs 1.5.1 GitHub Pages Creamos el repositorio donde vamos a alojar nuestra p\u00e1gina web y en la configuraci\u00f3n de ese repositorio, activamos Pages en la rama main usando la carpeta docs . 1.5.2 Mkdocs Para usar mkdocs: Con mkdocs new miweb , creamos un nuevo proyecto mkdocs llamado 'miweb'. Entramos en el directorio miweb . Hacemos dentro de miweb un mkdocs build para crear los archivos de una p\u00e1gina web. Con mkdocs serve , construye un sitio web y lo muestra en 127.0.0.1 . Con mkdocs gh-deploy creamos una rama, publicamos los cambios en GitHub y te crea la p\u00e1gina web p\u00fablica. En el mkdocs.yml que se crea, podemos personalizar cosas como el tema, el nombre de la p\u00e1gina, los plugins que a\u00f1adimos... etc. 1.5.2.1 Instalar Mkdocs con venv de Python Instalamos Python seleccionando \"Add Python.exe to PATH\" si es en Windows y si es Linux , hacemos sudo apt install python3 y sudo apt install python3-pip . Probamos la instalaci\u00f3n haciendo python --version y pip --version en la bash. Clonamos el repositorio que vayamos a usar para la p\u00e1gina en nuestra bash. Entramos en el repositorio clonado. Hacemos python -m venv venv para crear un entorno virtual con el nombre de venv (virtual environment) . Si en vez de Python tenemos python3, tenemos que instalar la opci\u00f3n de entorno virtual con sudo apt install python3-venv . Hacemos source venv/scripts/activate para activar el entorno virtual . Si en vez de python tenemos python3, tenemos que activarlo con source venv/bin/activate . Para desactivarlo, hacemos deactivate . Para borrar el entorno virtual, borramos el directorio donde creamos el entorno virtual. Para instalar la utilidad de mkdocs en nuestro entorno virtual, hacemos pip install mkdocs . Por \u00faltimo, para comprobar los paquetes pip de Python que hay instalados hacemos pip freeze . 1.5.2.2 Instalar Mkdocs con venv de Poetry Despu\u00e9s de instalar Python, instalamos Poetry con sudo apt install python3-poetry . Con el comando poetry , podemos ver qu\u00e9 podemos hacer con \u00e9l. Con poetry new nombre_proyecto , creamos un nuevo proyecto Python en nuestro directorio Home. En esta pr\u00e1ctica, le hemos dado el nombre de publicar , cre\u00e1ndolo con poetry new publicar . Entramos en el proyecto con cd publicar y con poetry install instalamos lo b\u00e1sico en nuestro proyecto Python. Para activar nuestro entorno virtual , hacemos poetry shell . Para salirnos de nuestro entorno virtual , hacemos exit . Ahora, vamos a instalar paquetes pip dentro de nuestro entorno virtual. Para instalar MkDocs, hacemos poetry add mkdocs .","title":"1.5 GitHub Pages y Mkdocs"},{"location":"1.%20GitHub/1.5%20GitHub%20Pages%20y%20Mkdocs/#15-github-pages-y-mkdocs","text":"","title":"1.5 GitHub Pages y Mkdocs"},{"location":"1.%20GitHub/1.5%20GitHub%20Pages%20y%20Mkdocs/#151-github-pages","text":"Creamos el repositorio donde vamos a alojar nuestra p\u00e1gina web y en la configuraci\u00f3n de ese repositorio, activamos Pages en la rama main usando la carpeta docs .","title":"1.5.1 GitHub Pages"},{"location":"1.%20GitHub/1.5%20GitHub%20Pages%20y%20Mkdocs/#152-mkdocs","text":"Para usar mkdocs: Con mkdocs new miweb , creamos un nuevo proyecto mkdocs llamado 'miweb'. Entramos en el directorio miweb . Hacemos dentro de miweb un mkdocs build para crear los archivos de una p\u00e1gina web. Con mkdocs serve , construye un sitio web y lo muestra en 127.0.0.1 . Con mkdocs gh-deploy creamos una rama, publicamos los cambios en GitHub y te crea la p\u00e1gina web p\u00fablica. En el mkdocs.yml que se crea, podemos personalizar cosas como el tema, el nombre de la p\u00e1gina, los plugins que a\u00f1adimos... etc.","title":"1.5.2 Mkdocs"},{"location":"1.%20GitHub/1.5%20GitHub%20Pages%20y%20Mkdocs/#1521-instalar-mkdocs-con-venv-de-python","text":"Instalamos Python seleccionando \"Add Python.exe to PATH\" si es en Windows y si es Linux , hacemos sudo apt install python3 y sudo apt install python3-pip . Probamos la instalaci\u00f3n haciendo python --version y pip --version en la bash. Clonamos el repositorio que vayamos a usar para la p\u00e1gina en nuestra bash. Entramos en el repositorio clonado. Hacemos python -m venv venv para crear un entorno virtual con el nombre de venv (virtual environment) . Si en vez de Python tenemos python3, tenemos que instalar la opci\u00f3n de entorno virtual con sudo apt install python3-venv . Hacemos source venv/scripts/activate para activar el entorno virtual . Si en vez de python tenemos python3, tenemos que activarlo con source venv/bin/activate . Para desactivarlo, hacemos deactivate . Para borrar el entorno virtual, borramos el directorio donde creamos el entorno virtual. Para instalar la utilidad de mkdocs en nuestro entorno virtual, hacemos pip install mkdocs . Por \u00faltimo, para comprobar los paquetes pip de Python que hay instalados hacemos pip freeze .","title":"1.5.2.1 Instalar Mkdocs con venv de Python"},{"location":"1.%20GitHub/1.5%20GitHub%20Pages%20y%20Mkdocs/#1522-instalar-mkdocs-con-venv-de-poetry","text":"Despu\u00e9s de instalar Python, instalamos Poetry con sudo apt install python3-poetry . Con el comando poetry , podemos ver qu\u00e9 podemos hacer con \u00e9l. Con poetry new nombre_proyecto , creamos un nuevo proyecto Python en nuestro directorio Home. En esta pr\u00e1ctica, le hemos dado el nombre de publicar , cre\u00e1ndolo con poetry new publicar . Entramos en el proyecto con cd publicar y con poetry install instalamos lo b\u00e1sico en nuestro proyecto Python. Para activar nuestro entorno virtual , hacemos poetry shell . Para salirnos de nuestro entorno virtual , hacemos exit . Ahora, vamos a instalar paquetes pip dentro de nuestro entorno virtual. Para instalar MkDocs, hacemos poetry add mkdocs .","title":"1.5.2.2 Instalar Mkdocs con venv de Poetry"},{"location":"2.%20KVM/","text":"2.1 \u00bfQu\u00e9 es KVM?","title":"2.1 \u00bfQu\u00e9 es KVM?"},{"location":"2.%20KVM/#21-que-es-kvm","text":"","title":"2.1 \u00bfQu\u00e9 es KVM?"},{"location":"3.%20DHCP/","text":"","title":"Index"}]}